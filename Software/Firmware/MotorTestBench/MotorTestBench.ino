// Motor Test Bench V1.0
// Developer: Alan Carvalho
// Date: 03/04/2024

#include "HX711.h"    // Library to control the HX711 module

// Motor control pins
#define MOTOR_ENA 5
#define MOTOR_IN1 6
#define MOTOR_IN2 7

// HX711 pins
#define LOADCELL_SCK 10
#define LOADCELL_DT 11

// Optical switch pin
#define OPTICAL_SWITCH 3

//Current sensor pin
#define CURRENT_SENSOR A0

// Bench parameters
#define ARM_LENGTH 0.035    // Lever arm length (m)
#define ENCODER_POINTS 20   // Number of windows in the encoder disk
#define MAX_PULSES 100      // Number of pulses to restart the counting
#define MAX_VOLTAGE 12      // Power supply voltage (V)
#define MAX_CURRENT 30      // Maximum current for the current sensor (A)


HX711 loadCell;   // HX711 library object

unsigned int pwm = 0;             // PWM applied to the motor
float voltage = 0;                // Voltage applied to the motor (V)
float current= 0;                 // Current consumed by the motor (A)
float mass = 0;                   // Mass on the load cell (g)
float torque = 0;                 // Torque generated by the motor (N.m)
float speed = 0;                  // Motor shaft speed (RPM)
volatile int pulseCount = 0;      // Encoder pulse count
unsigned long currentTime = 0;    // Current time on speed calculation (ms)
unsigned long initialTime = 0;    // Initial time on speed calculation (ms)


void setup() 
{
  Serial.begin(115200);   // Open the serial port

  // Configure pins
  pinMode(MOTOR_ENA, OUTPUT);
  pinMode(MOTOR_IN1, OUTPUT);
  pinMode(MOTOR_IN2, OUTPUT);
  pinMode(OPTICAL_SWITCH, INPUT_PULLUP);

  // Set pins starting state
  digitalWrite(MOTOR_IN1, LOW);
  digitalWrite(MOTOR_IN2, HIGH);
  analogWrite(MOTOR_ENA, pwm);

  // Configure the HX711 sensor
  loadCell.begin(LOADCELL_DT, LOADCELL_SCK);
  loadCell.set_scale(440);
  loadCell.tare();

  // Configure the interrupt to detect encoder pulses
  attachInterrupt(digitalPinToInterrupt(OPTICAL_SWITCH), countPulse, RISING);
}


void loop() 
{
  // Use the serial port input data to control motor PWM
  if(Serial.available() > 0)
  {
    int pwm = Serial.parseInt();
    analogWrite(MOTOR_ENA, pwm);
    
    Serial.print("PWM = ");
    Serial.println(pwm);

    initialTime = millis();
    pulseCount= 0;
  }

  // Get all the necessary data
  getVoltage();
  getCurrent();
  getTorque();
  getSpeed();

  // Print the collected data on the serial port
  printData();

  delay(100);
}


void getVoltage()
{
  voltage = map(pwm, 0, 255, 0, MAX_VOLTAGE);
}

void getCurrent()
{
  int rawCurrent = analogRead(CURRENT_SENSOR);
  current = map(rawCurrent, 0, 1024, 0, MAX_CURRENT);
}

void getTorque()
{
  mass = loadCell.get_units();
  torque = 0.00981 * mass * ARM_LENGTH;
}

void getSpeed()
{
  currentTime = millis() - initialTime;
  speed = (pulseCount / ENCODER_POINTS) / (currentTime / 60000);

  if(pulseCount > MAX_PULSES)
  {
    pulseCount = 0;
    initialTime = millis();
  }
}

void countPulse()
{
  pulseCount++;
}

void printData()
{
  Serial.print("Voltage = ");
  Serial.print(voltage);
  Serial.println(" V");

  Serial.print("Current = ");
  Serial.print(current);
  Serial.println(" A");

  Serial.print("Torque = ");
  Serial.print(torque);
  Serial.println(" N.m");

  Serial.print("Speed = ");
  Serial.print(speed);
  Serial.println(" RPM");
}